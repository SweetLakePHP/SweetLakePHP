---

- name: Initialize project root and gather facts
  deploy: "path={{ project_root }} state=present"

- name: Clone repository
  git: "repo={{ project_github_repo }} dest={{ project_source_path }} version={{ project_version }}"

- name: Remove previous (failed) build dir
  file: "path={{ project_build_path }} state=absent"

- name: Copy files to new build dir
  command: "cp -r {{ project_source_path }} {{ project_build_path }}"
- name: Remove .git folder from new release folder
  file: "path={{ project_build_path }}/.git state=absent"

- name: Running pre-dependency commands
  command: "{{ item }} chdir={{ project_build_path }}"
  with_items: project_pre_dependency_commands
  environment: project_environment

- name: copying project files
  copy: src={{ item.src }} dest={{ project_build_path}}/{{ item.dest }}
  with_items: project_files

- name: copying project templates
  template: src={{ item.src }} dest={{ project_build_path}}/{{ item.dest }} mode=0644
  with_items: project_templates

- name: Discover composer.json
  command: "{{ project_command_for_has_composer }} chdir={{ project_build_path }}"
  register: project_has_composer_output
  ignore_errors: true
  changed_when: false
  when: project_has_composer is undefined

- name: Do composer install
  command: "{{ project_command_for_composer_install }} chdir={{ project_build_path }}"
  environment: project_environment
  when: (project_has_composer is defined and project_has_composer) or (project_has_composer_output.rc == 0)

- name: Ensure shared sources are present
  file: "path='{{ deploy.shared_path }}/{{ item.src }}' state=directory"
  with_items: project_shared_children

- name: Ensure shared paths are absent
  file: "path='{{ project_build_path }}/{{ item.path }}' state=absent"
  with_items: project_shared_children

- name: Create shared symlinks
  file: "path='{{ project_build_path }}/{{ item.path }}' src='{{ deploy.shared_path }}/{{ item.src }}' state=link"
  with_items: project_shared_children

- name: Move build path to current release path
  command: mv {{ project_build_path }} {{ deploy.new_release_path }}

- name: Running post-dependency commands
  command: "{{ item }} chdir={{ deploy.new_release_path }}"
  with_items: project_post_dependency_commands
  environment: project_environment

- name: Create symlink for current release
  file: src={{ deploy.new_release_path }} dest={{ deploy.current_path }} state=link
  when: project_finalize

