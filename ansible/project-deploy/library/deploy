#!/usr/bin/python

DOCUMENTATION = '''
---
module: deploy
version_added: "1.4"
author: Jasper N. Brouwer, R. de la Fuente
short_description: Manages the deploy of a project
description:
  - Manages the deploy of a project.
options:
  path:
    required: true
    aliases: ['dest']
    description:
      - the root path of the project.
  owner:
    required: false
    default: null
    description:
      - the name of the user that should own the file/directory, as would be fed to I(chown).
  group:
    required: false
    default: null
    description:
      - the name of the group that should own the file/directory, as would be fed to I(chown).
  mode:
    required: false
    default: null
    description:
      - the mode the file or directory should be, such as 0644 as would be fed to I(chmod).
  keep_releases:
    required: false
    default: 5
    description:
      - the numer of old releases to keep in case of a cleanup state
  state:
    required: false
    choices: [ present, absent, cleanup ]
    default: present
    description:
      - the state of the project. C(present) will create the project, C(absent) will remove the project, C(cleanup) will remove old releases.
'''


class Deploy(object):

    def __init__(self, module):
        module.params['path'] = os.path.expanduser(module.params['path'])

        self.module    = module
        self.file_args = module.load_file_common_arguments(module.params)

        self.path  = module.params['path']
        self.owner = module.params['owner']
        self.group = module.params['group']
        self.mode  = module.params['mode']
        self.keep_releases  = module.params['keep_releases']
        self.state = module.params['state']

    def gather_facts(self):
        project_path  = self.path
        current_path  = os.path.join(project_path, 'current')
        releases_path = os.path.join(project_path, 'releases')
        shared_path   = os.path.join(project_path, 'shared')
        system_path   = os.path.join(shared_path,  'system')

        last_release, last_release_path = self._get_last_release(releases_path)

        new_release = time.strftime("%Y%m%d%H%M%S")
        new_release_path = os.path.join(releases_path, new_release)

        return {
            'project_path': project_path,
            'current_path': current_path,
            'releases_path': releases_path,
            'shared_path':  shared_path,
            'system_path':  system_path,
            'last_release': last_release,
            'last_release_path': last_release_path,
            'new_release': new_release,
            'new_release_path': new_release_path
        }

    def delete_path(self, path):
        if not os.path.lexists(path):
            return False

        if not os.path.isdir(path):
            self.module.fail_json(msg="%s exists but is not a directory" % path)

        if not self.module.check_mode:
            try:
                shutil.rmtree(path, ignore_errors=False)
            except Exception, e:
                self.module.fail_json(msg="rmtree failed: %s" % str(e))

        return True

    def create_path(self, path):
        changed = False

        if not os.path.lexists(path):
            if not self.module.check_mode:
                os.makedirs(path)
            changed = True

        elif not os.path.isdir(path):
            self.module.fail_json(msg="%s exists but is not a directory" % path)

        changed = self.module.set_directory_attributes_if_different(self._get_file_args(path), changed)

        return changed

    def check_link(self, path):
        changed = False

        if os.path.lexists(path):
            if not os.path.islink(path):
                self.module.fail_json(msg="%s exists but is not a symbolic link" % path)
            changed = self.module.set_file_attributes_if_different(self._get_file_args(path), changed)

        return changed

    def _get_file_args(self, path):
        file_args = self.file_args.copy()
        file_args['path'] = path
        return file_args

    def _get_last_release(self, releases_path):
        last_release = None
        last_release_path = None

        if os.path.lexists(releases_path):
            releases = [ f for f in os.listdir(releases_path) if os.path.isdir(os.path.join(releases_path,f)) ]

            if len(releases):
                releases.sort()
                last_release = releases[-1]
                last_release_path = os.path.join(releases_path, last_release)

        return last_release, last_release_path

def main():

    module = AnsibleModule(
        argument_spec = dict(
            path  = dict(aliases=['dest'], required=True, type='str'),
            keep_releases  = dict(required=False, type='int', default=5),
            state = dict(choices=['present', 'absent', 'cleanup'], default='present')
        ),
        add_file_common_args=True,
        supports_check_mode=True
    )

    deploy = Deploy(module)
    facts  = deploy.gather_facts()

    result = {
        'ansible_facts': { 'deploy': facts },
        'state': deploy.state
    }

    if deploy.owner:
        result['owner'] = deploy.owner
    if deploy.group:
        result['group'] = deploy.group
    if deploy.mode:
        result['mode'] = deploy.mode

    changes = 0

    if deploy.state == 'absent':
        changes += deploy.delete_path(facts['project_path'])

    elif deploy.state == 'present':
        changes += deploy.create_path(facts['project_path'])
        changes += deploy.create_path(facts['releases_path'])
        changes += deploy.create_path(facts['shared_path'])
        changes += deploy.create_path(facts['system_path'])
        changes += deploy.check_link(facts['current_path'])

    elif deploy.state == 'cleanup':
        releases = os.listdir(facts['releases_path'])
        releases.sort(reverse=True)
        obsoletes = releases[deploy.keep_releases:]
        for obsolete in obsoletes:
            changes += deploy.delete_path(os.path.join(facts['releases_path'],obsolete))

    if changes > 0:
        result['changed'] = True
    else:
        result['changed'] = False

    module.exit_json(**result)


# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
